/*
Arithmetic Operations API

API for performing basic arithmetic operations

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calcssdkgo

import (
	"encoding/json"
)

// checks if the DividePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DividePostRequest{}

// DividePostRequest struct for DividePostRequest
type DividePostRequest struct {
	// List of numbers to divide
	Numbers []float32 `json:"numbers,omitempty"`
}

// NewDividePostRequest instantiates a new DividePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividePostRequest() *DividePostRequest {
	this := DividePostRequest{}
	return &this
}

// NewDividePostRequestWithDefaults instantiates a new DividePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividePostRequestWithDefaults() *DividePostRequest {
	this := DividePostRequest{}
	return &this
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *DividePostRequest) GetNumbers() []float32 {
	if o == nil || IsNil(o.Numbers) {
		var ret []float32
		return ret
	}
	return o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DividePostRequest) GetNumbersOk() ([]float32, bool) {
	if o == nil || IsNil(o.Numbers) {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *DividePostRequest) HasNumbers() bool {
	if o != nil && !IsNil(o.Numbers) {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given []float32 and assigns it to the Numbers field.
func (o *DividePostRequest) SetNumbers(v []float32) {
	o.Numbers = v
}

func (o DividePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DividePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Numbers) {
		toSerialize["numbers"] = o.Numbers
	}
	return toSerialize, nil
}

type NullableDividePostRequest struct {
	value *DividePostRequest
	isSet bool
}

func (v NullableDividePostRequest) Get() *DividePostRequest {
	return v.value
}

func (v *NullableDividePostRequest) Set(val *DividePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDividePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDividePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividePostRequest(val *DividePostRequest) *NullableDividePostRequest {
	return &NullableDividePostRequest{value: val, isSet: true}
}

func (v NullableDividePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


