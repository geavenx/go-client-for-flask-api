/*
Arithmetic Operations API

API for performing basic arithmetic operations

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calcssdkgo

import (
	"encoding/json"
)

// checks if the SumPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SumPost200Response{}

// SumPost200Response struct for SumPost200Response
type SumPost200Response struct {
	Sum *float32 `json:"sum,omitempty"`
}

// NewSumPost200Response instantiates a new SumPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSumPost200Response() *SumPost200Response {
	this := SumPost200Response{}
	return &this
}

// NewSumPost200ResponseWithDefaults instantiates a new SumPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSumPost200ResponseWithDefaults() *SumPost200Response {
	this := SumPost200Response{}
	return &this
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *SumPost200Response) GetSum() float32 {
	if o == nil || IsNil(o.Sum) {
		var ret float32
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SumPost200Response) GetSumOk() (*float32, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *SumPost200Response) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given float32 and assigns it to the Sum field.
func (o *SumPost200Response) SetSum(v float32) {
	o.Sum = &v
}

func (o SumPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SumPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	return toSerialize, nil
}

type NullableSumPost200Response struct {
	value *SumPost200Response
	isSet bool
}

func (v NullableSumPost200Response) Get() *SumPost200Response {
	return v.value
}

func (v *NullableSumPost200Response) Set(val *SumPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSumPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSumPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSumPost200Response(val *SumPost200Response) *NullableSumPost200Response {
	return &NullableSumPost200Response{value: val, isSet: true}
}

func (v NullableSumPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSumPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


