/*
Arithmetic Operations API

API for performing basic arithmetic operations

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calcssdkgo

import (
	"encoding/json"
)

// checks if the DividePost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DividePost200Response{}

// DividePost200Response struct for DividePost200Response
type DividePost200Response struct {
	Quotient *float32 `json:"quotient,omitempty"`
}

// NewDividePost200Response instantiates a new DividePost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividePost200Response() *DividePost200Response {
	this := DividePost200Response{}
	return &this
}

// NewDividePost200ResponseWithDefaults instantiates a new DividePost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividePost200ResponseWithDefaults() *DividePost200Response {
	this := DividePost200Response{}
	return &this
}

// GetQuotient returns the Quotient field value if set, zero value otherwise.
func (o *DividePost200Response) GetQuotient() float32 {
	if o == nil || IsNil(o.Quotient) {
		var ret float32
		return ret
	}
	return *o.Quotient
}

// GetQuotientOk returns a tuple with the Quotient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DividePost200Response) GetQuotientOk() (*float32, bool) {
	if o == nil || IsNil(o.Quotient) {
		return nil, false
	}
	return o.Quotient, true
}

// HasQuotient returns a boolean if a field has been set.
func (o *DividePost200Response) HasQuotient() bool {
	if o != nil && !IsNil(o.Quotient) {
		return true
	}

	return false
}

// SetQuotient gets a reference to the given float32 and assigns it to the Quotient field.
func (o *DividePost200Response) SetQuotient(v float32) {
	o.Quotient = &v
}

func (o DividePost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DividePost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quotient) {
		toSerialize["quotient"] = o.Quotient
	}
	return toSerialize, nil
}

type NullableDividePost200Response struct {
	value *DividePost200Response
	isSet bool
}

func (v NullableDividePost200Response) Get() *DividePost200Response {
	return v.value
}

func (v *NullableDividePost200Response) Set(val *DividePost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDividePost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDividePost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividePost200Response(val *DividePost200Response) *NullableDividePost200Response {
	return &NullableDividePost200Response{value: val, isSet: true}
}

func (v NullableDividePost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividePost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


