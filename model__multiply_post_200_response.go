/*
Arithmetic Operations API

API for performing basic arithmetic operations

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package calcssdkgo

import (
	"encoding/json"
)

// checks if the MultiplyPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiplyPost200Response{}

// MultiplyPost200Response struct for MultiplyPost200Response
type MultiplyPost200Response struct {
	Product *float32 `json:"product,omitempty"`
}

// NewMultiplyPost200Response instantiates a new MultiplyPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiplyPost200Response() *MultiplyPost200Response {
	this := MultiplyPost200Response{}
	return &this
}

// NewMultiplyPost200ResponseWithDefaults instantiates a new MultiplyPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiplyPost200ResponseWithDefaults() *MultiplyPost200Response {
	this := MultiplyPost200Response{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *MultiplyPost200Response) GetProduct() float32 {
	if o == nil || IsNil(o.Product) {
		var ret float32
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiplyPost200Response) GetProductOk() (*float32, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *MultiplyPost200Response) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given float32 and assigns it to the Product field.
func (o *MultiplyPost200Response) SetProduct(v float32) {
	o.Product = &v
}

func (o MultiplyPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiplyPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableMultiplyPost200Response struct {
	value *MultiplyPost200Response
	isSet bool
}

func (v NullableMultiplyPost200Response) Get() *MultiplyPost200Response {
	return v.value
}

func (v *NullableMultiplyPost200Response) Set(val *MultiplyPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiplyPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiplyPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiplyPost200Response(val *MultiplyPost200Response) *NullableMultiplyPost200Response {
	return &NullableMultiplyPost200Response{value: val, isSet: true}
}

func (v NullableMultiplyPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiplyPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


